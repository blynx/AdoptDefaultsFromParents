<?php // namespace ProcessWire;

/**
 * 
 */

class AdoptDefaultsFromParents extends WireData implements Module, ConfigurableModule { 

  public static function getModuleInfo() {
    return array(
      'title' => 'Adopt field values as defaults from parents',
      'version' => 003,
      'author' => 'Steffen Henschel',
      'summary' => 'Fills fields of newly added pages with corresponding field-values of their parents. Configurable by setting "giving templates" and "adopting fields".',
      'href' => '',
      'autoload' => true,
      'singular' => true
      );
  }

  public function ready() {
    $this->pages->addHookAfter('Pages::added', $this, 'adoptDefaults');
  }

  /**
   * [adoptDefaults description]
   * @param  [type] $event [description]
   * @return [type]        [description]
   */
  public function adoptDefaults($event) {

    $page = $event->arguments(0);
    $parent = $page->parent;

    $adoptingFields = $this->adopting_fields; // array of field names
    $givingTemplates = $this->giving_templates; // array of template ids

    // save outputformatting state
    // and set to false
    $of = $page->of();
    $page->of(false);

    foreach ($page->data as $f => $fValue) {
      // constrain to allowed adopting fields first
      if (in_array($f, $adoptingFields)) {
        switch ($this->data['parent_mode']) {

          case 'immediate':
            // field not empty & parent is allowed by template
            if ($parent->$f != "" && in_array($parent->template->id, $givingTemplates)) {
              $page->set($f, $parent->$f);
            }
            break;

          case 'closest':
            $closestParent = $page->closest("{$f}!=''");
            // parent is allowed by template
            if (get_class($closestParent) != "NullPage" && in_array($closestParent->template->id, $givingTemplates)) {
              $page->set($f, $closestParent->$f);
            }
            break;
        }
      }
    }

    // save page
    // and re-set of to initial state
    $page->save();
    $page->of($of);

  }

  public function getModuleConfigInputfields($data) {

    $inputfields = new InputfieldWrapper();

    $field = wire('modules')->get("InputfieldRadios");
    $field->name = "parent_mode";
    $field->label = __("Which parent?");
    $field->description = __('If set to "Immediate parent", only the direct parents will be called. If set to "Closest parent" the next parent which has "that field" will be called.');
    $field->addOption("immediate", __("Immediate parent"));
    $field->addOption("closest", __("Closest parent"));
    if (isset($data['parent_mode'])) {
      $field->value = $data['parent_mode'];
    } else {
      $field->value = "immediate";
    }
    $inputfields->add($field);

    $field = wire('modules')->get("InputfieldAsmSelect");
    $field->name = "giving_templates";
    $field->label = __("Giving templates");
    $field->description = __("Choose those templates, which may give field values to their newly added children.");
    foreach (wire('templates')->getAll() as $key => $template) {
      $field->addOption($key, $template);
    }
    if (isset($data['giving_templates'])) $field->value = $data['giving_templates'];
    $inputfields->add($field);

    $field = wire('modules')->get('InputfieldAsmSelect');
    $field->name = 'adopting_fields';
    $field->label = __("Adopting fields");
    $field->description = __("Fields that can adopt default values from parent template / page");
    foreach (wire('fields')->getAll() as $f) {
      $field->addOption($f->name, $f->title);
    }
    if(isset($data['adopting_fields'])) $field->value = $data['adopting_fields'];
    $inputfields->add($field); 

    return $inputfields;
  }
  
}

?>